Embedded Systems - Programming the CPU
  Sensors - CPU - Actuators.

  Sensors/inputs change states. CPU acts on these changes. 
  CPU can be programmed while electronics HW is a fixed and can't be changed.

 CPU is connected to Actuators (like motors etc.) via GPIO. 


Embedded Systems -> Firmware Engineering and Systems Software Engg.

FW -> Programming the CPU - > Software State machine.  
  Eg: electronics - TV ,  audio system, microwave, charger, etc. 
Systems Software -> Higher level OS. Interacts with User SW. 
      Eg: IOS - Controlling underlying electronics, Kernel
      involves thread management, HW, security, encryption mgmgt. 
   Eg: Phone has multiple CPUs. i.e multiple Subsystems and each subsystem will have a CPU. 
        Screen will have its CPU, Audio system will have CPU, 
        Main CPU will interact with other small CPUs. Higher Level OS (HLOS) sits on the Main CPU which is interacting with peripherals
 some FW activities -> Activating read/write paths to memory. configurations etc.  


Microcontroller Class of CPU - it is FW. Eg: Arm Cortex M. 32 bit CPU. M is micro controller class. RISC- V embedded class 32 bit. AVR, PIC
32 bit CPU - how many bits CPU can manipulate (store/add) is 32 bit.

A-class CPU - Application grade CPU. usually 64bit CPU. Sys Engineer


Memory Mapped IO
 32 bit CPU - can generate 2^32 4GB address locations. 
 Let's say 128KB memory. 
 I/O - registers. 

Register - Bits.
  Using Transistor create a NOT gate. Using NOT gate, feedback of NOT gate - which is memory bit. 
  Create Flipflops.  Arrange 8 D flipflops in side side load/read them in parallel to create 8 bit register.
  Each register will have address.

Output -> Control an LED: Address range where the Registers are available. Reading/writing to registers are tied as HW signals to another complicated digital logic.
 It triggers state machine at digital HW level and it reads it as input and has a line going to trigger LED. 
Input -> Reading sensor - Sensing hw is writing into registers. registers are accessible through address to CPU and CPU reads registers to know sensor data. 

Read/Writing on registers has an effect on real world.

CPU, Memory, Input, Output Registers, 
C, Assembly, CPU, RTOS(state machines) ,
RTOS is not HLOS, not kernel/linux kernel/user kernel, it is a plain scheduler with abilities to manage threads, queues, mutex
OS primitives (scheduler, threads, queues, mutex). Free RTOS.
each state machine - buttons, screen, timer etc are spawn as a thread.


https://github.com/pyjamabrah/arm-m-assembly

Role of FW engg - device drivers (mechanics - how to do things - how to send data to printer - what registers to configure etc.) and 
  application dev (policies, statemachine- given a big file, how to send data - multiple pages together, First page first etc.)

Systems Engg - Devices which we can run apps - laptop, phone, smart watches, cloud servers, car infotainment,
state machine is too complicated and unknown to sys engineer.
works with HLOS. Windows,linux, macOS, watchOS. 
HLOS - involves Virtual Memory via MMU. layers of isolation
Application Class CPU.  x86, AMD, ARM-A. Used to create layers of isolation.


A-CPU -> 4 levels of Execution levels. EL layers. SPlit into secure and non secure. Virtual memory. 
OS runs in EL1 layer. Applications run on EL0. 
Generic OS. App running on OS is not aware of underlying HW. Sys engineers don't care about memory map. 
Eg: notepad, chrome running. They don't care about memory available. OS needs to take care of it. 
However, in FW, engineer needs to take care of it and one application crashes entire sys to go down. 
EL0 level - does not have access to Sys resources (eg: ports, ). Code running on EL0 has no access. It requests OS to do.
EL1 level - OS runs. OS access HW resources. Juggles between multiple application processes. Scheduler runs. eg. timer expires, kernel kicks in and changes process running. 
EL2 level - Hypeviser. multiple OS can run. VMWare. 


Eg: netflix runs in secure mode. video buffer data is in secure mode. non secure mode applications like screenshot does not have access and hence we get a blank screen

Virtual Memory - 
each process has its memory address. MMU translates address to physical address. Each process may think it is accessing same address. 
memory corruption is contained. 

Role of Sys Engg - 
Device drivers - deals with linux kernel facilities. provides OS primitives. Use these facilities and manipulates HW.
application dev - middleware - audio subsystem - driver to HW driver. interacts with user info (media player) and routes to output (headphones/speaker?)
Architect - Designers.

SOC- several A class CPU together on island. Bus system. CPU interconnects with Bus System. Other modules - GPU, memory controller, BT, modem. 
BT, modem chips have M class CPU. HLOS is running on CPU-A cluster island.




  
